{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\"; // video.js player from the docs: https://github.com/videojs/video.js/blob/master/docs/guides/react.md\n\nvar VideoPlayer = /*#__PURE__*/function (_React$Component) {\n  _inherits(VideoPlayer, _React$Component);\n\n  var _super = _createSuper(VideoPlayer);\n\n  function VideoPlayer() {\n    _classCallCheck(this, VideoPlayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VideoPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // instantiate Video.js\n      this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n        console.log(\"onPlayerReady\", this);\n      });\n    } // destroy player on unmount\n    //   componentWillUnmount() {\n    //     if (this.player) {\n    //       this.player.dispose();\n    //     }\n    //   }\n    //   componentWillReceiveProps(newProps) {\n    //     // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\n    //     // instead its properties will be updated with the details of the new video. In this case,\n    //     // we can update the src of the existing player with the new video URL.\n    //     if (this.player) {\n    //       this.player.src({\n    //         type: newProps.video.mime_type,\n    //         src: newProps.video.video_url,\n    //       });\n    //     }\n    //   }\n    // wrap the player in a div with a `data-vjs-player` attribute\n    // so videojs won't create additional wrapper in the DOM\n    // see https://github.com/videojs/video.js/pull/3856\n    // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return __jsx(\"div\", {\n        \"data-vjs-player\": true\n      }, __jsx(\"video\", {\n        ref: function ref(node) {\n          return _this.videoNode = node;\n        },\n        className: \"video-js\",\n        src: \"https://res.cloudinary.com/dalnnaod7/video/upload/v1587034700/video_1_ou39e0.mp4\",\n        onMouseEnter: function onMouseEnter() {\n          return _this.player.play();\n        }\n      }));\n    }\n  }]);\n\n  return VideoPlayer;\n}(React.Component);\n\nexport default VideoPlayer;","map":{"version":3,"sources":["/Users/imac/Desktop/shopify-react2/components/Player1.jsx"],"names":["React","videojs","VideoPlayer","player","videoNode","props","onPlayerReady","console","log","node","play","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,4BAAP,C,CAEA;;IAEMC,W;;;;;;;;;;;;;wCACgB;AAClB;AACA,WAAKC,MAAL,GAAcF,OAAO,CAAC,KAAKG,SAAN,EAAiB,KAAKC,KAAtB,EAA6B,SAASC,aAAT,GAAyB;AACzEC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,IAA7B;AACD,OAFoB,CAArB;AAGD,K,CAED;AACF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AAEA;;;;6BACS;AAAA;;AACP,aACE;AAAK;AAAL,SACE;AACE,QAAA,GAAG,EAAE,aAACC,IAAD;AAAA,iBAAW,KAAI,CAACL,SAAL,GAAiBK,IAA5B;AAAA,SADP;AAEE,QAAA,SAAS,EAAC,UAFZ;AAGE,QAAA,GAAG,EAAC,kFAHN;AAIE,QAAA,YAAY,EAAE;AAAA,iBAAM,KAAI,CAACN,MAAL,CAAYO,IAAZ,EAAN;AAAA;AAJhB,QADF,CADF;AAUD;;;;EA3CuBV,KAAK,CAACW,S;;AA8ChC,eAAeT,WAAf","sourcesContent":["import React from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\n\n// video.js player from the docs: https://github.com/videojs/video.js/blob/master/docs/guides/react.md\n\nclass VideoPlayer extends React.Component {\n  componentDidMount() {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n      console.log(\"onPlayerReady\", this);\n    });\n  }\n\n  // destroy player on unmount\n//   componentWillUnmount() {\n//     if (this.player) {\n//       this.player.dispose();\n//     }\n//   }\n\n//   componentWillReceiveProps(newProps) {\n//     // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\n//     // instead its properties will be updated with the details of the new video. In this case,\n//     // we can update the src of the existing player with the new video URL.\n//     if (this.player) {\n//       this.player.src({\n//         type: newProps.video.mime_type,\n//         src: newProps.video.video_url,\n//       });\n//     }\n//   }\n\n  // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n\n  // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\n  render() {\n    return (\n      <div data-vjs-player>\n        <video\n          ref={(node) => (this.videoNode = node)}\n          className=\"video-js\"\n          src=\"https://res.cloudinary.com/dalnnaod7/video/upload/v1587034700/video_1_ou39e0.mp4\"\n          onMouseEnter={() => this.player.play()}\n        ></video>\n      </div>\n    );\n  }\n}\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}